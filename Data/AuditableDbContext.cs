using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Audit.Models;
using Microsoft.EntityFrameworkCore;

namespace Audit.Data
{
    public class AuditableDbContext : DbContext
    {
        public AuditableDbContext(DbContextOptions options) : base(options)
        {

        }

        public virtual DbSet<AuditEntity> Audits { get; set; }

        private List<AuditEntry> TrackingChanges(string userName)
        {
            //ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is AuditEntity || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);

                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntry.Action = Enum.GetName(typeof(EntityState), entry.State);
                auditEntry.Username = userName;
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {

                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:

                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audits.Add(auditEntry.ToAudit());
            }

            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private void SaveTrackingChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries != null && auditEntries.Any())
            {

                foreach (var auditEntry in auditEntries)
                {
                    // Get the final value of the temporary properties
                    foreach (var prop in auditEntry.TemporaryProperties)
                    {
                        if (prop.Metadata.IsPrimaryKey())
                        {
                            auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                        }
                        else
                        {
                            auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                        }
                    }

                    // Save the Audit entry
                    Audits.Add(auditEntry.ToAudit());
                }
            }
        }

        public virtual async Task<int> SaveChangesAsync(string userName)
        {
            int result = 0;
            var tempEntries = TrackingChanges(userName);

            ChangeTracker.AutoDetectChangesEnabled = false;
            result = await base.SaveChangesAsync();

            if (tempEntries != null && tempEntries.Any())
            {
                SaveTrackingChanges(tempEntries);
                result = await base.SaveChangesAsync();
                var added = tempEntries.FirstOrDefault(x => x.Action == "Added");
                var idValue = added.KeyValues.FirstOrDefault(x => x.Key == "Id").Value.ToString();
                if (!string.IsNullOrWhiteSpace(idValue))
                {
                    result = int.Parse(idValue);
                }
            }

            ChangeTracker.AutoDetectChangesEnabled = true;
            return result;
        }
    }
}
